buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:7.3.1"
  }
}

group = 'org.elasticsearch.plugin.ingest'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'elasticsearch.esplugin'

licenseFile = rootProject.file('LICENSE.txt')
noticeFile = rootProject.file('NOTICE.txt')

esplugin {
  name 'ingest-tika-recursive'
  description 'Ingest processor that does recursive parsing with Tika'
  classname 'org.elasticsearch.plugin.ingest.tika.recursive.IngestTikaRecursivePlugin'
  licenseFile rootProject.file('LICENSE.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

versions << [
  'elastic' : '7.3.1',
  'tika': '1.22',

  'slf4j':'1.7.28',

  'pdfbox': '2.0.16',
  'poi': '4.0.1',
  'mime4j': '0.8.3',
]

// In this section you declare the dependencies for your production and test code
// Note, the two dependencies are not really needed as the buildscript dependency gets them in already
// they are just here as an example
dependencies {
  configurations.all {
      //resolutionStrategy.force "org.slf4j:slf4j-api:${versions.slf4j}"
      resolutionStrategy.force "joda-time:joda-time:2.10.2"
      resolutionStrategy.force "commons-codec:commons-codec:1.12"
      resolutionStrategy.force "org.slf4j:slf4j-api:1.7.26"
      resolutionStrategy.force "org.slf4j:jcl-over-slf4j:1.7.26"
      resolutionStrategy.force "com.google.guava:guava:28.0-jre"
      resolutionStrategy.force "com.google.protobuf:protobuf-java:3.9.0"
      resolutionStrategy.force "org.apache.httpcomponents:httpclient:4.5.9"
      resolutionStrategy.force "org.apache.httpcomponents:httpmime:4.5.9"
      resolutionStrategy.force "org.apache.httpcomponents:httpcore:4.4.11"
      resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:2.9.9"

      resolutionStrategy.dependencySubstitution {
        substitute module('net.java.dev.jna:jna') with module('org.elasticsearch:jna:4.5.1')
        substitute module('commons-logging:commons-logging') with module("org.slf4j:jcl-over-slf4j:1.7.26")
        substitute module('c3p0:c3p0') with module ("com.mchange:c3p0:0.9.5.4")
        substitute module('com.sun.activation:jakarta.activation') with module ("jakarta.activation:jakarta.activation-api:1.2.1")
      }
  }

  compile "org.elasticsearch:elasticsearch:${versions.elastic}"

  compile "org.apache.tika:tika-core:${versions.tika}"
  compile "org.apache.tika:tika-parsers:${versions.tika}"
  compile "org.apache.tika:tika-serialization:${versions.tika}"

  testCompile "org.elasticsearch.test:framework:${versions.elastic}"

  runtime "org.apache.tika:tika-parsers:${versions.tika}"
}

// Set to false to not use elasticsearch checkstyle rules
checkstyleMain.enabled = true
checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
dependencyLicenses.enabled = false

// FIXME thirdparty audit needs to be enabled
thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
// licenseHeaders.enabled = false

test {
  jvmArgs '-Djava.net.preferIPv4Stack=true'
  testLogging.showStandardStreams = true
}
